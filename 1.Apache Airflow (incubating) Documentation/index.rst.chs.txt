.. image:: img/pin_large.png
    :width: 100
.. image:: img/incubator.jpg
    :width: 150

Apache Airflow (孵化工程) 文档
=========================================

.. 重要信息::

    **免责声明**: Apache Airflow 是一个由Apache孵化器赞助，
    在Apache软件基金会(ASF)下努力孵化的项目。
    所有在Apache软件基金会新接受的项目都需要一段时期的观察，
    直到进一步的审查以证明其基础设施的建设，社区，和决策过程已经稳定下来，
    并且要能看得出其与别的成功的Apache基金会的项目一样能有长久的发展。
    孵化的过程不一定能反映出代码的完整性和稳定性，它表明项目由Apache基金会还未给予充分的肯定。


Airflow是一个以编程方式进行设计编写、任务调度和监控工作流的平台.

Airflow将任务定义为一个有向无环图(DAGs)。
Airflow调度器在一组指定前后依赖的worker上面执行你的任务。
丰富的命令行工具让你可以执行许多复杂的流程。
丰富的用户界面使你可以很容易地看到在生产过程中运行的pipline，从而进行进程监控，并在需要时进行排错。

当工作流被定义为代码时，它们就变得更加容易维护、更加版本化、具有很好可测试性和协作性。



.. image:: img/airflow.gif

------------

工作原理
----------

- **动态代码**:  Airflow的pipelines是Python编写的，这让pipeline可以动态配置。这种方式可以根据代码动态生成pipline。
- **可扩展性**:  很容易地定义你自己的操作器、执行器和扩展库，这样可以更好地适配你所预期的执行环境.
- **配置优雅**:  Airflow的pipelines的定义是简洁而详尽的。Airflow核心利用功能强大的**Jinja**模板引擎来参数化执行你的脚本.
- **扩展性强**:  Airflow拥有模块化的结构，并使用消息队列来管理任意数量的worker。Airflow的规模可以任意进行横向扩展。


在这之后要提到的
------------------

Airflow**不是**一个数据流处理的解决方案。
任务不会将数据进行移动(尽管任务可以交换一些数据的结构!)。
Airflow并不是`Spark Streaming <http://spark.apache.org/streaming/>`_
或者`Storm <https://storm.apache.org/>`_ 这样的工具，它更像是
`Oozie <http://oozie.apache.org/>`_ or或者
`Azkaban <http://data.linkedin.com/opensource/azkaban>`_这类的工具。

工作流程会被要求定义成偏静态化的或者不是经常变化的。
你可以认为工作流中的任务结构比数据库结构动态性要强。
Airflow的工作流程从运行到下一步都要求结构相似，这就使得工作单元和连续性清晰明。


目录
-------
.. 文档树::
    :maxdepth: 4

    工程
    授权
    开始
    安装
    教程
    设置
    界面
    概念
    分析
    客户端
    调度
    插件
    安全
    api
    整合
    问答
    代码
